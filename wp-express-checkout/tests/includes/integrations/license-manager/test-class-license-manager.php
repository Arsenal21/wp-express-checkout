<?php

namespace WP_Express_Checkout\Integrations;

use WP_Express_Checkout\Orders;
use WP_Express_Checkout\Products;
use WP_UnitTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2021-06-28 at 07:52:47.
 *
 * @group integrations
 *
 * @covers WP_Express_Checkout\Integrations\License_Manager
 */
class License_ManagerTest extends WP_UnitTestCase {

	protected $log;

	/**
	 * @var License_Manager
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	public function setUp() {
		require_once WPEC_TESTS_DIR . '/mocks/mock-slm-api-utility.php';
		$this->object = new License_Manager;
		$GLOBALS['slm_debug_logger'] = $this;
		update_option( 'slm_plugin_options', [
			'lic_prefix' => 'test_license_',
			'default_max_domains' => 42,
		] );
	}

	/**
	 * @covers WP_Express_Checkout\Integrations\License_Manager::email_body_filter
	 */
	public function test_email_body_filter__no_order_id() {
		$body = '{wpec_slm_data}';
		$args = array(
			'order_id' => 0,
		);

		$output = $this->object->email_body_filter( $body, [], $args );

		$this->assertEquals( $body, $output );
	}

	/**
	 * @covers WP_Express_Checkout\Integrations\License_Manager::email_body_filter
	 */
	public function test_email_body_filter__no_product_id() {
		$body    = '{wpec_slm_data}';
		$payment = json_decode( file_get_contents( WPEC_TESTS_DIR . '/data/payment-data.json' ), true );
		$order   = Orders::create();
		$order_id = $order->get_id();
		$args = array(
			'order_id' => $order_id,
		);
		$payment['id'] = $order_id;

		$output = $this->object->email_body_filter( $body, $payment, $args );

		$this->assertEquals( $body, $output );
	}

	/**
	 * @covers WP_Express_Checkout\Integrations\License_Manager::email_body_filter
	 */
	public function test_email_body_filter__no_product_license() {
		$product_id = $this->factory->post->create( [ 'post_type' => Products::$products_slug ] );
		$body    = '{wpec_slm_data}';
		$payment = json_decode( file_get_contents( WPEC_TESTS_DIR . '/data/payment-data.json' ), true );
		$order   = Orders::create();
		$order_id = $order->get_id();
		$args = array(
			'order_id' => $order_id,
		);
		$payment['id'] = $order_id;

		$order->add_item( Products::$products_slug, 'test product', 42, 3, $product_id, true );

		$output = $this->object->email_body_filter( $body, $payment, $args );

		$this->assertEquals( $body, $output );
	}

	/**
	 * @covers WP_Express_Checkout\Integrations\License_Manager::email_body_filter
	 */
	public function test_email_body_filter__reflects_default_options() {
		$product_id = $this->factory->post->create( [
			'post_type' => Products::$products_slug,
			'meta_input' => [
				'wpec_slm_license_enabled' => 1
			],
		] );
		$body    = '{wpec_slm_data}';
		$payment = json_decode( file_get_contents( WPEC_TESTS_DIR . '/data/payment-data.json' ), true );
		$order   = Orders::create();
		$order_id = $order->get_id();
		$args = array(
			'order_id' => $order_id,
		);
		$payment['id'] = $order_id;

		$order->add_item( Products::$products_slug, 'test product', 42, 3, $product_id, true );

		$output = $this->object->email_body_filter( $body, $payment, $args );

		$lic_fields = \SLM_API_Utility::$lics[ $order_id ];

		$this->assertContains( $lic_fields['license_key'], $output );
		$this->assertEquals( 42, $lic_fields['max_allowed_domains'] );
	}

	/**
	 * @covers WP_Express_Checkout\Integrations\License_Manager::email_body_filter
	 */
	public function test_email_body_filter__reflects_product_options() {
		$product_id = $this->factory->post->create( [
			'post_type' => Products::$products_slug,
			'meta_input' => [
				'wpec_slm_license_enabled' => 1,
				'wpec_slm_max_allowed_domains' => 24,
				'wpec_slm_date_of_expiry' => 33,
			],
		] );
		$body    = '{wpec_slm_data}';
		$payment = json_decode( file_get_contents( WPEC_TESTS_DIR . '/data/payment-data.json' ), true );
		$order   = Orders::create();
		$order_id = $order->get_id();
		$args = array(
			'order_id' => $order_id,
		);
		$payment['id'] = $order_id;

		$order->add_item( Products::$products_slug, 'test product', 42, 3, $product_id, true );

		$output = $this->object->email_body_filter( $body, $payment, $args );

		$lic_fields = \SLM_API_Utility::$lics[ $order_id ];

		$this->assertContains( $lic_fields['license_key'], $output );
		$this->assertEquals( 24, $lic_fields['max_allowed_domains'] );
	}

	public function log_debug( $log ) {
		$this->log[] = $log;
	}

}
